syntax = "proto3";
// using 

package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
	int32 Time = 4;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 OldInstanceId = 3;
	int64 InstanceId = 4;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 InstanceId = 4;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	int64 AccountId = 2;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 1;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
	int32 ZoneId = 5;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType L2R_LoginAccountResponse
message R2L_LoginAccountRequest // IActorRequest
{
    // Realm 向LoginCenter 验证账户是否登录
	int32 RpcId = 1;
	int64 AccountId = 2;
}

message L2R_LoginAccountResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2L_DisconnectGateUnit
message L2G_DisconnectGateUnit // IActorRequest
{
    // LoginCenter 向 Gate 请求下线某个用户
	int32 RpcId = 1;
	int64 AccountId = 2;
}

message G2L_DisconnectGateUnit // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType L2G_AddLoginRecord
message G2L_AddLoginRecord // IActorRequest
{
	// Gate 向 LoginCenter 记录登录的用户
	int32 RpcId = 1;
	int64 AccountId = 2;
	int32 ZoneId = 3;
}

message L2G_AddLoginRecord // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2G_RequestEnterGameState
message G2M_RequestEnterGameState // IActorLocationRequest
{
	// Gate 向 Game 确认角色是否在游戏服
	int32 RpcId = 1;
}

message M2G_RequestEnterGameState // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2G_RequestExitGame
message G2M_RequestExitGame // IActorLocationRequest
{
	// Gate 向 Game 角色下线请求
	int32 RpcId = 1;
}

message M2G_RequestExitGame // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType L2G_RemoveLoginRecord
message G2L_RemoveLoginRecord // IActorRequest
{
	// Gate 向 LoginCenter 下线登录的用户
	int32 RpcId = 1;
	int64 AccountId = 2;
	int32 ZoneId = 3;
}

message L2G_RemoveLoginRecord // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType M2G_UnitDataSave
message G2M_UnitDataSave // IActorLocationRequest
{
	// 向 Map 保存角色数据
	int32 RpcId = 1;
}

message M2G_UnitDataSave // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}


// -----------玩家缓存相关-------------------


//ResponseType UnitCache2Other_AddOrUpdateUnit
message Other2UnitCache_AddOrUpdateUnit // IActorRequest
{
	// 增加或者更新UnitCache
	int32 RpcId = 1;
	int64 UnitId = 2;					// 需要缓存的UnitId
	repeated string EntityTypes = 3;	// 实体类型
	repeated bytes EntityBytes = 4;		// 实体序列化后的bytes

}

message UnitCache2Other_AddOrUpdateUnit // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3; 
}

//ResponseType UnitCache2Other_GetUnit
message Other2UnitCache_GetUnit // IActorRequest
{
	// 获取Unit缓存
	int32 RpcId = 1;
	int64 UnitId = 2;
	repeated string ComponentNameList = 3;		// 需要获取的组件名
}

message UnitCache2Other_GetUnit // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;

	repeated Entity EntityList = 4;
	repeated string ComponentNameList = 5;
}

//ResponseType UnitCache2Other_DeleteUnit
message Other2UnitCache_DeleteUnit // IActorRequest
{
	// 删除Unit缓存
	int32 RpcId = 1;
	int64 UnitId = 2;
}

message UnitCache2Other_DeleteUnit // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}


















